def find_blue(walls_num):
    tempo = StopWatch()
    side_to_turn = ["Left", 1]

    if walls_num < 4:
        stop()

        print("starting")
        while not saw_blue() and not saw_black() and not saw_yellow() and not saw_red() and not obstacle():
            move_forward(380)
        time_forward = [motor_left.angle(), motor_right.angle()]
        stop()
        if saw_red():
            print("Parede vermelha 1")
            reposition()
        elif saw_black():
            reposition()
        elif saw_yellow():
            reposition()
        if not saw_blue() and not saw_red() and not saw_black() and not saw_yellow() and not obstacle():
            while not saw_blue() and not saw_black() and not saw_red() and not saw_yellow() and not obstacle():
                move_forward(380)

            stop()

        if saw_red():
            print("Parede vermelha 2")
            stop()
            move_backward_cm(40) #ver valor
            turn_left(90)
            stop()
            while not saw_blue():
                print("Entrei aqui")
                move_forward(380)
                if saw_black() or saw_yellow():
                    stop()
                    print("Parede preta")
                    
                    reposition() #reposicionar
                    move_backward_cm(15)
                    turn_left(90)
                    stop()
                    turn_left(90)
                elif obstacle():
                    stop()
                    path_obstacle()
                
                    if side_to_turn[0] == "Left":
                        turn_left(90)
                        if side_to_turn[1] == 2:
                            side_to_turn = ["Right", 1]
                        elif side_to_turn[1] == 1:
                            side_to_turn[1] += 1
                    else:
                        turn_right(90)
                        if side_to_turn[1] == 2:
                            side_to_turn = ["Left", 1]
                        elif side_to_turn[1] ==1:
                            side_to_turn[1] += 1
                    tempo.reset()
                    while not saw_red() and not obstacle() and not saw_blue()  and not saw_yellow():
                        move_forward(380)
                    stop()
                    if tempo.time() < 3000 or obstacle():
                        if not obstacle():
                            reposition() #verificar
                        while not saw_red() and not saw_black() and not saw_yellow() and not saw_blue():
                            move_forward(390)
                        stop()
                        if saw_red():
                            print("Parede vermelha")
                            reposition()
                            stop()
                            move_backward_cm(38)
                            if side_to_turn[0] == "Left":
                                turn_left(90)
                                if side_to_turn[1] == 2:
                                    side_to_turn = ["Right", 1]
                                elif side_to_turn[1] == 1:
                                    side_to_turn[1] += 1
                            else:
                                turn_right(90)
                                if side_to_turn[1] == 2:
                                    side_to_turn = ["Left", 1]
                                elif side_to_turn[1] == 1:
                                    side_to_turn += 1
                    elif saw_black():
                        print("Parede preta")
                        reposition()
                        move_backward_cm(8)
                        if side_to_turn[0] == "Left":
                            turn_left(90)
                            if side_to_turn[1] == 2:
                                side_to_turn = ["Left", 1]
                            elif side_to_turn[1] == 1:
                                side_to_turn[1] += 1
                        else:
                            turn_right(90)
                            stop()
                            if side_to_turn[1] == 2:
                                side_to_turn = ["Left", 1]
                            elif side_to_turn[1] == 1:
                                side_to_turn[1] += 1
                        find_blue(0)
                    elif obstacle():
                        stop()
                        path_obstacle()
                        if side_to_turn[0] == "Left":
                            turn_left(90)
                            if side_to_turn[1] == 2:
                                side_to_turn = ["Right", 1]
                            elif side_to_turn[1] == 1:
                                side_to_turn[1] += 1
                        else:
                            turn_right(90)
                            stop()
                            if side_to_turn[1] == 2:
                                side_to_turn = ["Left", 1]
                            elif side_to_turn[1] == 1:
                                side_to_turn[1] += 1
                        while not saw_blue():
                            move_forward(380)
                            if saw_black() or saw_yellow():
                                stop()
                                reposition() #se arrumar
                                move_backward_cm(7)
                                if side_to_turn[0] == "Left":
                                    turn_left(90)
                                    if side_to_turn[1] == 2:
                                        side_to_turn = ["Right", 1]
                                    elif side_to_turn[1] == 1:
                                        side_to_turn[1] += 1
                                else:
                                    turn_right(90)
                                    stop()
                                    if side_to_turn[1] == 2:
                                        side_to_turn = ["Left", 1]
                                    elif side_to_turn[1] == 1:
                                        side_to_turn[1] += 1
                            elif obstacle():
                                stop()
                                path_obstacle()
                                if side_to_turn[0] == "Left":
                                    turn_left(90)
                          #recognize_first()      elif side_to_turn[1] == 1:
                                        side_to_turn[1] += 1
                                else:
                                    turn_right(90)
                                    stop()
                                    if side_to_turn[1] == 2:
                                        side_to_turn = ["Left", 1]
                                    elif side_to_turn[1] == 1:
                                        side_to_turn[1] += 1
                                
                            elif saw_red():
                                stop()
                                reposition()
                                stop()
                                move_backward_cm(38)
                                if side_to_turn[0] == "Left":
                                    turn_left(90)
                                    if side_to_turn[1] == 2:
                                        side_to_turn = ["Right", 1]
                                    elif side_to_turn[1] == 1:
                                        side_to_turn[1] += 1
                                else:
                                    turn_right(90)
                                    if side_to_turn[1] == 2:
                                        side_to_turn = ["Left", 1]
                                    elif side_to_turn[1] == 1:
                                        side_to_turn += 1
            else:
                print("Cheguei aqui")
                if saw_blue():
                    stop()
                    reposition()
                    return 0
                stop()
                reposition()
                move_backward_cm(38)
                if (side_to_turn[0] == "Left" and side_to_turn[1] == 1) or (side_to_turn[0] == "Right" and side_to_turn[1] == 2):
                    turn_left(90)
                else:
                    turn_right(90)

                while not saw_blue() or not saw_red() or not obstacle() or not saw_black() or not saw_yellow():
                        print("oi friends")
                        move_forward(360)
                        stop()
                        if saw_red():
                            reposition()
                            move_backward_cm(38)
                            if side_to_turn[0] == "ESQUERDA":
                                stop()
                                turn_left(90)
                                if side_to_turn[1] == 2:
                                    side_to_turn = ["DIREITA", 1]
                                elif side_to_turn[1] == 1:
                                    side_to_turn[1] += 1
                            else:
                                turn_right(90)
                                if side_to_turn[1] == 2:
                                    side_to_turn = ["ESQUERDA", 1]
                                elif side_to_turn[1] == 1:
                                    side_to_turn[1] += 1
                        elif saw_black():
                            stop()
                            reposition()
                            move_backward_cm(8)
                            if side_to_turn[0] == "ESQUERDA":
                                turn_left(90)
                                if side_to_turn[1] == 2:
                                    side_to_turn = ["DIREITA", 1]
                                elif side_to_turn[1] == 1:
                                    side_to_turn[1] += 1
                            else:
                                turn_right(90)
                                if side_to_turn[1] == 2:
                                    side_to_turn = ["ESQUERDA", 1]
                                elif side_to_turn[1] == 1:
                                    side_to_turn[1] += 1
                            find_blue(0)
                        elif obstacle():
                            stop()
                            if side_to_turn[0] == "ESQUERDA":
                                turn_left(90)
                                if side_to_turn[1] == 2:
                                    side_to_turn = ["DIREITA", 1]
                                elif side_to_turn[1] == 1:
                                    side_to_turn[1] += 1
                            else:
                                turn_right(90)
                                if side_to_turn[1] == 2:
                                    side_to_turn = ["ESQUERDA", 1]
                                elif side_to_turn[1] == 1:
                                    side_to_turn[1] += 1
                            while not saw_blue():
                                move_forward_cm(500)
                                if saw_black() or saw_yellow():
                                    stop()
                                    reposition()
                                    move_backward_cm(8)
                                    if side_to_turn[0] == "ESQUERDA":
                                        turn_left(90)
                                        if side_to_turn[1] == 2:
                                            side_to_turn = ["DIREITA", 1]
                                        elif side_to_turn[1] == 1:
                                            side_to_turn[1] += 1
                                    else:
                                        turn_right(90)
                                        if side_to_turn[1] == 2:
                                            side_to_turn = ["ESQUERDA", 1]
                                        elif side_to_turn[1] == 1:
                                            side_to_turn[1] += 1
                                elif obstacle():
                                    stop()
                                    if side_to_turn[0] == "ESQUERDA":
                                        turn_left(90)
                                        if side_to_turn[1] == 2:
                                            side_to_turn = ["DIREITA", 1]
                                        elif side_to_turn[1] == 1:
                                            side_to_turn[1] += 1
                                    else:
                                        turn_right(90)
                                        if side_to_turn[1] == 2:
                                            side_to_turn = ["ESQUERDA", 1]
                                        elif side_to_turn[1] == 1:
                                            side_to_turn[1] += 1
                                elif saw_red():
                                    stop()
                                    reposition()
                                    move_backward_cm(38)
                                    if side_to_turn[0] == "ESQUERDA":
                                        turn_left(90)
                                        if side_to_turn[1] == 2:
                                            side_to_turn = ["DIREITA", 1]
                                        elif side_to_turn[1] == 1:
                                            side_to_turn[1] += 1
                                    else:
                                        turn_right(90)
                                        if side_to_turn[1] == 2:
                                            side_to_turn = ["ESQUERDA", 1]
                                        elif side_to_turn[1] == 1:
                                            side_to_turn[1] += 1







       
        elif saw_black() or saw_yellow() or obstacle():
            print("Tentando me achar")
            if saw_black() or saw_yellow():
                stop()
                move_backward_cm(15)
                stop()
            elif obstacle():
                path_obstacle()
                stop()
            turn_right(90)
            print("Vai somar mais um no numero_de_paredes")
            print(walls_num)
            find_blue(walls_num + 1)
    else:
        reposition()
        turn_right(90)
        while ultra_sensor.distance() > 145 and not saw_black() and not saw_yelllow():
            move_forward(350)
        stop()
        if saw_black() or saw_yellow():
            reposition()
            move_backward_cm(8)
        find_blue(0)